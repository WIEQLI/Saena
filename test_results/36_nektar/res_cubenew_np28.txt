Solving 3D Helmholtz:
  - Communication: Parallel MPI (28 processes)
  - Solver type  : PETScFull
  - Lambda       : 1
  - No. modes    : 4


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


max(d00) = 
max(d00) = 2.16422 min(d00) = 2
3.25914 min(d00) = 2

max(d00) = 2.24791 min(d00) = 2

max(d00) = 2.2216 min(d00) = 2

max(d00) = 
max(d00) = 3.42652 min(d00) = 2.56307

max(d00) = 2.9971 min(d00) = 2

max(d00) = 2.79553 min(d00) = 2

max(d00) = 2.9171 min(d00) = 2

max(d00) = 2.37299 min(d00) = 2

max(d00) = 2.69384 min(d00) = 2
2.994 min(d00) = 2

max(d00) = 3.11741 min(d00) = 2

max(d00) = 3.28486 min(d00) = 2

max(d00) = 2.58465 min(d00) = 2

max(d00) = 2.97922 min(d00) = 2

max(d00) = 
max(d00) = 
max(d00) = 2.87738 min(d00) = 2

max(d00) = 3.07082 min(d00) = 2

max(d00) = 3.41757 min(d00) = 2.72311

max(d00) = 3.42452 min(d00) = 2.75539

max(d00) = 3.39239 min(d00) = 2.74076

max(d00) = 2.84947 min(d00) = 2

max(d00) = 3.1352 min(d00) = 2
3.07115 min(d00) = 2
3.40604 min(d00) = 2.28889

max(d00) = 3.28748 min(d00) = 2

max(d00) = 2.99099 min(d00) = 2

max(d00) = 2.36007 min(d00) = 2

max(d00) = 2.40112 min(d00) = 2

number of processes = 28, number of threads = 1

_____________________________

level = 0 
number of procs = 28 
matrix size 	= 30267 
nonzero 	= 1165939 
density 	= 0.001273 

connStrength = 0.30 
current size = 30267 
new size     = 10206 
division     = 2.97
_____________________________

level = 1 
number of procs = 28 
matrix size 	= 10206 
nonzero 	= 7232330 
density 	= 0.069433 

connStrength = 0.30 
current size = 10206 
new size     = 3182 
division     = 3.21
_____________________________

level = 2 
number of procs = 28 
matrix size 	= 3182 
nonzero 	= 9268584 
density 	= 0.915404 

connStrength = 0.30 
current size = 3182 
new size     = 1332 
division     = 2.39
_____________________________

level = 3 
number of procs = 28 
matrix size 	= 1332 
nonzero 	= 1774224 
density 	= 1.000000 

connStrength = 0.30 
current size = 1332 
new size     = 758 
division     = 1.76
_____________________________

level = 4 
number of procs = 28 
matrix size 	= 758 
nonzero 	= 574564 
density 	= 1.000000 

connStrength = 0.30 
current size = 758 
new size     = 505 
division     = 1.50
_____________________________

level = 5 
number of procs = 28 
matrix size 	= 505 
nonzero 	= 255025 
density 	= 1.000000 

connStrength = 0.30 
current size = 505 
new size     = 408 
division     = 1.24
_____________________________

level = 6 
number of procs = 28 
matrix size 	= 408 
nonzero 	= 166464 
density 	= 1.000000 

connStrength = 0.30 
current size = 408 
new size     = 377 
division     = 1.08
_____________________________

level = 7 
number of procs = 28 
matrix size 	= 377 
nonzero 	= 142129 
density 	= 1.000000 
_____________________________

number of levels = << 6 >> (the finest level is 0)

******************************************************

 solver1.set_matrix() took 
 solver1.set_matrix() took 
 solver1.set_matrix() took 72 second(s) on P2. Size = 77075

 solver1.set_matrix() took 72 second(s) on P
 solver1.set_matrix() took 72 second(s) on P4. Size = 59344

 solver1.set_matrix() took 72 second(s) on P5. Size = 76671

 solver1.set_matrix() took 72 second(s) on P6. Size = 80527

 solver1.set_matrix() took 72 second(s) on P7. Size = 87506

 solver1.set_matrix() took 72 second(s) on P8. Size = 68120

 solver1.set_matrix() took 72 second(s) on P9. Size = 68421

 solver1.set_matrix() took 72 second(s) on P10. Size = 69906

 solver1.set_matrix() took 72 second(s) on P11. Size = 68808

 solver1.set_matrix() took 72 second(s) on P12. Size = 88892

 solver1.set_matrix() took 72 second(s) on P13. Size = 67772

 solver1.set_matrix() took 72 second(s) on P14. Size = 69542

 solver1.set_matrix() took 72 second(s) on P15. Size = 74392

 solver1.set_matrix() took 72 second(s) on P16. Size = 82695

 solver1.set_matrix() took 72 second(s) on P17. Size = 81503

 solver1.set_matrix() took 72 second(s) on P18. Size = 90399

 solver1.set_matrix() took 72 second(s) on P19. Size = 75702

 solver1.set_matrix() took 72 second(s) on P20. Size = 69505

 solver1.set_matrix() took 72 second(s) on P21. Size = 76366

 solver1.set_matrix() took 72 second(s) on P22. Size = 79395

 solver1.set_matrix() took 72 second(s) on P23. Size = 65803

 solver1.set_matrix() took 72 second(s) on P24. Size = 72921

 solver1.set_matrix() took 72 second(s) on P25. Size = 67518

 solver1.set_matrix() took 72 second(s) on P26. Size = 95768

 solver1.set_matrix() took 72 second(s) on P27. Size = 70038
72 second(s) on P0. Size = 68677
72 second(s) on P1. Size = 69252
3. Size = 80840
******************************************************

initial residual = 1.954534e+00 

Vcycle 1: 0.6588012768  	0.3370630972 
Vcycle 2: 0.2573247658  	0.3905954266 
Vcycle 3: 0.1151034142  	0.4473079529 
Vcycle 4: 0.0670612880  	0.5826177136 
Vcycle 5: 0.0488004120  	0.7276986977 
Vcycle 6: 0.0312332419  	0.6400200466 
Vcycle 7: 0.0152508169  	0.4882879907 
Vcycle 8: 0.0087467303  	0.5735253617 
Vcycle 9: 0.0065996414  	0.7545266774 
Vcycle 10: 0.0033444606  	0.5067639877 
Vcycle 11: 0.0015800887  	0.4724494808 
Vcycle 12: 0.0010117991  	0.6403432487 
Vcycle 13: 0.0006736503  	0.6657945032 
Vcycle 14: 0.0003526949  	0.5235578325 
Vcycle 15: 0.0001628473  	0.4617227884 
Vcycle 16: 0.0000974762  	0.5985743244 
Vcycle 17: 0.0000700615  	0.7187548713 
Vcycle 18: 0.0000351727  	0.5020258002 
Vcycle 19: 0.0000165216  	0.4697286153 
Vcycle 20: 0.0000105118  	0.6362424720 
Vcycle 21: 0.0000073329  	0.6975933903 
Vcycle 22: 0.0000035375  	0.4824168815 
Vcycle 23: 0.0000017649  	0.4989028737 
Vcycle 24: 0.0000012108  	0.6860350073 
Vcycle 25: 0.0000007306  	0.6034127244 
Vcycle 26: 0.0000003412  	0.4669630415 
Vcycle 27: 0.0000002134  	0.6255956999 
Vcycle 28: 0.0000001444  	0.6766912591 
Vcycle 29: 0.0000000678  	0.4694072577 
Vcycle 30: 0.0000000343  	0.5059309308 
Vcycle 31: 0.0000000242  	0.7045993314 
Vcycle 32: 0.0000000137  	0.5656834552 
Vcycle 33: 0.0000000062  	0.4506484564 
Vcycle 34: 0.0000000036  	0.5901299654 
Vcycle 35: 0.0000000027  	0.7337965093 
Vcycle 36: 0.0000000013  	0.5000791797 
Vcycle 37: 0.0000000006  	0.4619958386 
Vcycle 38: 0.0000000004  	0.6936012177 
Vcycle 39: 0.0000000003  	0.6645937237 
Vcycle 40: 0.0000000001  	0.4324888269 
Vcycle 41: 0.0000000001  	0.5106523611 
Vcycle 42: 0.0000000000  	0.7177053913 
Vcycle 43: 0.0000000000  	0.5387123863 
Vcycle 44: 0.0000000000  	0.4425826270 
Vcycle 45: 0.0000000000  	0.6093221427 
Vcycle 46: 0.0000000000  	0.6706961505 
Vcycle 47: 0.0000000000  	0.4812668680 
Vcycle 48: 0.0000000000  	0.5428956123 
Vcycle 49: 0.0000000000  	0.6992190214 
Vcycle 50: 0.0000000000  	0.5397869818 
Vcycle 51: 0.0000000000  	0.5165672077 
Vcycle 52: 0.0000000000  	0.6922522231 
Vcycle 53: 0.0000000000  	0.5601213869 
Vcycle 54: 0.0000000000  	0.4554035973 
Vcycle 55: 0.0000000000  	0.6428262592 
Vcycle 56: 0.0000000000  	0.6446598173 
Vcycle 57: 0.0000000000  	0.4509317269 
Vcycle 58: 0.0000000000  	0.5953927251 
Vcycle 59: 0.0000000000  	0.6859101877 
Vcycle 60: 0.0000000000  	0.4943662416 
Vcycle 61: 0.0000000000  	0.5203205603 
Vcycle 62: 0.0000000000  	0.6789435586 
Vcycle 63: 0.0000000000  	0.5593398137 
Vcycle 64: 0.0000000000  	0.4979761694 
Vcycle 65: 0.0000000000  	0.5699995868 
Vcycle 66: 0.0000000000  	0.5933757898 
Vcycle 67: 0.0000000000  	0.6103857503 
Vcycle 68: 0.0000000000  	0.5188174842 
Vcycle 69: 0.0000000000  	0.4999833297 
Vcycle 70: 0.0000000000  	0.6740569576 
Vcycle 71: 0.0000000000  	0.5888991748 
Vcycle 72: 0.0000000000  	0.4841604438 
Vcycle 73: 0.0000000000  	0.5912678425 
Vcycle 74: 0.0000000000  	0.6727851531 
Vcycle 75: 0.0000000000  	0.5110422424 
Vcycle 76: 0.0000000000  	0.5540747664 

******************************************************

final:
stopped at iteration    = 76 
final absolute residual = 1.698704e-19
relative residual       = 8.691095e-20 

******************************************************
****** Nek++ and Saena outputs match on P0! ******

****** Nek++ and Saena outputs match on P1! ******

****** Nek++ and Saena outputs match on P2! ******

****** Nek++ and Saena outputs match on P3! ******

****** Nek++ and Saena outputs match on P4! ******

****** Nek++ and Saena outputs match on P5! ******

****** Nek++ and Saena outputs match on P6! ******

****** Nek++ and Saena outputs match on P7! ******

****** Nek++ and Saena outputs match on P8! ******

****** Nek++ and Saena outputs match on P9! ******

****** Nek++ and Saena outputs match on P10! ******

****** Nek++ and Saena outputs match on P11! ******

****** Nek++ and Saena outputs match on P12! ******

****** Nek++ and Saena outputs match on P13! ******

****** Nek++ and Saena outputs match on P14! ******

****** Nek++ and Saena outputs match on P15! ******

****** Nek++ and Saena outputs match on P16! ******

****** Nek++ and Saena outputs match on P17! ******

****** Nek++ and Saena outputs match on P18! ******

****** Nek++ and Saena outputs match on P19! ******

****** Nek++ and Saena outputs match on P20! ******

****** Nek++ and Saena outputs match on P21! ******

****** Nek++ and Saena outputs match on P22! ******

****** Nek++ and Saena outputs match on P23! ******

****** Nek++ and Saena outputs match on P24! ******

****** Nek++ and Saena outputs match on P25! ******

****** Nek++ and Saena outputs match on P26! ******

****** Nek++ and Saena outputs match on P27! ******

Writing: "/uufs/chpc.utah.edu/common/home/u1013493/AllMeshes/cubenew0.fld" (0.034198s, XML)
L infinity error: 0.62742
L 2 error:        0.162278
H 1 error:        1.83306
Time in ExpEval:  0.0119692
