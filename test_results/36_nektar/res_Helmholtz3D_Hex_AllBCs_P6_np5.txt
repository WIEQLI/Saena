Solving 3D Helmholtz:
  - Communication: Parallel MPI (5 processes)
  - Solver type  : PETScFull
  - Lambda       : 1
  - No. modes    : 4


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


************************************
solve_pcg_update3() experiment
************************************


number of processes = 5, number of threads = 1

_____________________________

level = 0 
number of procs = 5 
matrix size 	= 810 
nonzero 	= 43560 
density 	= 0.066392 

connStrength = 0.30 
current size = 810 
new size     = 315 
division     = 2.57
_____________________________

level = 1 
number of procs = 5 
matrix size 	= 315 
nonzero 	= 99225 
density 	= 1.000000 

connStrength = 0.30 
current size = 315 
new size     = 116 
division     = 2.72
_____________________________

level = 2 
number of procs = 5 
matrix size 	= 116 
nonzero 	= 13456 
density 	= 1.000000 

connStrength = 0.30 
current size = 116 
new size     = 81 
division     = 1.43
_____________________________

level = 3 
number of procs = 5 
matrix size 	= 81 
nonzero 	= 6561 
density 	= 1.000000 

connStrength = 0.30 
current size = 81 
new size     = 5 
division     = 16.20
_____________________________

level = 4 
number of procs = 3 
matrix size 	= 5 
nonzero 	= 25 
density 	= 1.000000 
_____________________________

number of levels = << 4 >> (the finest level is 0)

******************************************************

 solver1.set_matrix() took 
 solver1.set_matrix() took 
 solver1.set_matrix() took 
 solver1.set_matrix() took 0 second(s) on P
 solver1.set_matrix() took 0 second(s) on P0. Size = 18192
4. Size = 16896
0 second(s) on P0 second(s) on P3. Size = 0 second(s) on P1. Size = 186882. Size = 174089504


******************************************************

initial residual = 3.378465e+00 

Vcycle 1: 0.2475734287  	0.0732798514 
Vcycle 2: 0.1023470854  	0.4134009289 
Vcycle 3: 0.0232630459  	0.2272956361 
Vcycle 4: 0.0107504098  	0.4621239150 
Vcycle 5: 0.0045688395  	0.4249921206 
Vcycle 6: 0.0048934609  	1.0710511873 
Vcycle 7: 0.0047854186  	0.9779210882 
Vcycle 8: 0.0045414253  	0.9490131555 
Vcycle 9: 0.0034166535  	0.7523306680 
Vcycle 10: 0.0031729752  	0.9286792366 
Vcycle 11: 0.0015921318  	0.5017788416 
Vcycle 12: 0.0009411642  	0.5911345899 
Vcycle 13: 0.0005483471  	0.5826264073 
Vcycle 14: 0.0003682454  	0.6715552727 
Vcycle 15: 0.0002790683  	0.7578325329 
Vcycle 16: 0.0002144741  	0.7685361563 
Vcycle 17: 0.0001486098  	0.6929034087 
Vcycle 18: 0.0001001553  	0.6739478827 
Vcycle 19: 0.0000830450  	0.8291627259 
Vcycle 20: 0.0000657868  	0.7921818543 
Vcycle 21: 0.0000590406  	0.8974536223 
Vcycle 22: 0.0000475034  	0.8045885464 
Vcycle 23: 0.0000310157  	0.6529155712 
Vcycle 24: 0.0000201488  	0.6496333188 
Vcycle 25: 0.0000127266  	0.6316299490 
Vcycle 26: 0.0000090674  	0.7124761014 
Vcycle 27: 0.0000054157  	0.5972767772 
Vcycle 28: 0.0000045921  	0.8479076256 
Vcycle 29: 0.0000036606  	0.7971551355 
Vcycle 30: 0.0000031137  	0.8506064372 
Vcycle 31: 0.0000024659  	0.7919358054 
Vcycle 32: 0.0000019965  	0.8096382858 
Vcycle 33: 0.0000013853  	0.6938567353 
Vcycle 34: 0.0000008018  	0.5787945183 
Vcycle 35: 0.0000006469  	0.8068150693 
Vcycle 36: 0.0000004478  	0.6921693086 
Vcycle 37: 0.0000003169  	0.7077547139 
Vcycle 38: 0.0000002157  	0.6806364934 
Vcycle 39: 0.0000001477  	0.6846852039 
Vcycle 40: 0.0000001342  	0.9085159511 
Vcycle 41: 0.0000001151  	0.8576178663 
Vcycle 42: 0.0000000864  	0.7505636335 
Vcycle 43: 0.0000000649  	0.7517288938 
Vcycle 44: 0.0000000478  	0.7368995947 
Vcycle 45: 0.0000000314  	0.6556447041 
Vcycle 46: 0.0000000236  	0.7521110332 
Vcycle 47: 0.0000000176  	0.7478930215 
Vcycle 48: 0.0000000100  	0.5669698542 
Vcycle 49: 0.0000000069  	0.6939959781 
Vcycle 50: 0.0000000059  	0.8486475432 
Vcycle 51: 0.0000000046  	0.7773777356 
Vcycle 52: 0.0000000035  	0.7720330758 
Vcycle 53: 0.0000000030  	0.8594010447 
Vcycle 54: 0.0000000021  	0.6926290324 
Vcycle 55: 0.0000000014  	0.6846398805 
Vcycle 56: 0.0000000009  	0.6216327740 
Vcycle 57: 0.0000000006  	0.7143345696 
Vcycle 58: 0.0000000004  	0.6248190294 
Vcycle 59: 0.0000000003  	0.7420437003 
Vcycle 60: 0.0000000002  	0.7452561988 
Vcycle 61: 0.0000000002  	0.8138310841 
Vcycle 62: 0.0000000001  	0.7744560380 
Vcycle 63: 0.0000000001  	0.8455276432 
Vcycle 64: 0.0000000001  	0.6558869167 
Vcycle 65: 0.0000000001  	0.7170020492 
Vcycle 66: 0.0000000000  	0.6979540063 
Vcycle 67: 0.0000000000  	0.5806578560 
Vcycle 68: 0.0000000000  	0.7077364952 
Vcycle 69: 0.0000000000  	0.7214049681 
Vcycle 70: 0.0000000000  	0.8651192904 
Vcycle 71: 0.0000000000  	0.8970016802 
Vcycle 72: 0.0000000000  	0.7104399611 
Vcycle 73: 0.0000000000  	0.6571832718 
Vcycle 74: 0.0000000000  	0.6637264476 
Vcycle 75: 0.0000000000  	0.6406043687 
Vcycle 76: 0.0000000000  	0.6221692209 
Vcycle 77: 0.0000000000  	0.7578827171 
Vcycle 78: 0.0000000000  	0.7598661352 
Vcycle 79: 0.0000000000  	0.6528624621 
Vcycle 80: 0.0000000000  	0.8322273311 
Vcycle 81: 0.0000000000  	0.8556179122 
Vcycle 82: 0.0000000000  	0.8504057094 
Vcycle 83: 0.0000000000  	0.7609403218 
Vcycle 84: 0.0000000000  	0.6698636428 
Vcycle 85: 0.0000000000  	0.5846030325 
Vcycle 86: 0.0000000000  	0.5805875284 
Vcycle 87: 0.0000000000  	0.6063225253 
Vcycle 88: 0.0000000000  	0.7057232527 
Vcycle 89: 0.0000000000  	0.7430228408 
Vcycle 90: 0.0000000000  	0.7880707969 
Vcycle 91: 0.0000000000  	0.7750007857 
Vcycle 92: 0.0000000000  	0.8625885325 
Vcycle 93: 0.0000000000  	0.7768454779 
Vcycle 94: 0.0000000000  	0.6945364066 
Vcycle 95: 0.0000000000  	0.7327874783 
Vcycle 96: 0.0000000000  	0.6416691879 
Vcycle 97: 0.0000000000  	0.6337793492 
Vcycle 98: 0.0000000000  	0.6137186970 
Vcycle 99: 0.0000000000  	0.6999573547 
Vcycle 100: 0.0000000000  	0.7889087621 
Vcycle 101: 0.0000000000  	0.8442955505 
Vcycle 102: 0.0000000000  	0.8291768659 
Vcycle 103: 0.0000000000  	0.7188168165 
Vcycle 104: 0.0000000000  	0.7555797215 
Vcycle 105: 0.0000000000  	0.7145914782 
Vcycle 106: 0.0000000000  	0.6725100292 
Vcycle 107: 0.0000000000  	0.6151624237 
Vcycle 108: 0.0000000000  	0.5933727108 
Vcycle 109: 0.0000000000  	0.7154472141 
Vcycle 110: 0.0000000000  	0.8056417365 
Vcycle 111: 0.0000000000  	0.8285876716 
Vcycle 112: 0.0000000000  	0.8231196778 
Vcycle 113: 0.0000000000  	0.8145600695 
Vcycle 114: 0.0000000000  	0.7347266619 
Vcycle 115: 0.0000000000  	0.6425302234 
Vcycle 116: 0.0000000000  	0.6097898610 
Vcycle 117: 0.0000000000  	0.6359708543 
Vcycle 118: 0.0000000000  	0.6606198867 
Vcycle 119: 0.0000000000  	0.8300007980 
Vcycle 120: 0.0000000000  	0.6509717285 
Vcycle 121: 0.0000000000  	0.7901658412 
Vcycle 122: 0.0000000000  	0.9082169932 
Vcycle 123: 0.0000000000  	0.8402612227 

******************************************************

final:
stopped at iteration    = 123 
final absolute residual = 3.325027e-19
relative residual       = 9.841828e-20 

******************************************************
****** Nek++ and Saena outputs match on P1! ******

****** Nek++ and Saena outputs match on P2! ******

****** Nek++ and Saena outputs match on P3! ******

****** Nek++ and Saena outputs match on P4! ******

   1.   |-int saena_object::setup(saena_matrix*) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object.cpp:42)                                                                                                                                                                                [..........]  3.55% CPU (   44.180ms)     1 hits 
   2.   | +-int saena_object::coarsen(Grid*) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object.cpp:167)                                                                                                                                                                               [..........]  0.02% CPU (    0.261ms)     4 hits
   3.   |   |-int restrict_matrix::transposeP(prolong_matrix*) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/restrict_matrix.cpp:16)                                                                                                                                                               [..........]  2.04% CPU (   25.386ms)     4 hits 
   4.   |   |-int saena_object::triple_mat_mult(Grid*) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_setup2.cpp:1199)                                                                                                                                                                         [==........] 22.73% CPU (  282.723ms)     4 hits
   5.   |   | +-int saena_object::fast_mm(cooEntry*, cooEntry*, std::vector<cooEntry>&, nnz_t, nnz_t, index_t, index_t, index_t, index_t, index_t, index_t, index_t*, index_t*, index_t*, index_t*, value_t*, MPI_Comm) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_setup2.cpp:646) [..........]  4.46% CPU (   55.410ms)    24 hits 
   6.   |   |-int saena_object::create_prolongation(saena_matrix*, std::vector<long unsigned int>&, prolong_matrix*) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_setup1.cpp:29)                                                                                                     [..........]  2.87% CPU (   35.668ms)     4 hits 
   7.   |   +-int saena_object::find_aggregation(saena_matrix*, std::vector<long unsigned int>&, std::vector<unsigned int>&) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_setup1.cpp:142)                                                                                            [..........]  2.37% CPU (   29.498ms)     4 hits 
   8.   +-int saena_object::solve_pcg(std::vector<double>&) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_solve.cpp:880)                                                                                                                                                              [=====.....] 59.16% CPU (  735.770ms)     1 hits 
   9.     +-int saena_object::solve_coarsest_SuperLU(saena_matrix*, std::vector<double>&, std::vector<double>&) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_solve.cpp:102)                                                                                                          [..........]  2.80% CPU (   34.802ms)   123 hits 
****** Nek++ and Saena outputs match on P0! ******

Writing: "../library/Demos/MultiRegions/Tests/Helmholtz3D_Hex_AllBCs_P60.fld" (0.009233s, XML)
L infinity error: 0.126901
L 2 error:        0.0299461
H 1 error:        0.172728
Time in ExpEval:  0.000763145
