cmake_minimum_required(VERSION 3.3)
project(Saena)

set(CMAKE_CXX_STANDARD 14) #CombBLAS requires 14
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# -----------------------------------------------------------------------
# Build Type

IF(NOT CMAKE_BUILD_TYPE)
#    SET(CMAKE_BUILD_TYPE Debug)
    SET(CMAKE_BUILD_TYPE Release)
ENDIF()

#SET(CMAKE_BUILD_TYPE Debug)
#SET(CMAKE_BUILD_TYPE Release)

IF(CMAKE_BUILD_TYPE STREQUAL Debug)
    add_definitions(-D__DEBUG1__)
ENDIF()

message(--\ Saena:\ CMAKE_BUILD_TYPE:\ ${CMAKE_BUILD_TYPE})

# -----------------------------------------------------------------------
# OpenMP

find_package(OpenMP)
if(OPENMP_FOUND)
    set (CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

# -----------------------------------------------------------------------
# MPI

find_package(MPI REQUIRED)
include_directories(${MPI_INCLUDE_PATH})

SET(SAENA_LIB_DEPENDENCIES ${SAENA_LIB_DEPENDENCIES} ${MPI_LIBRARIES})

# -----------------------------------------------------------------------
# Dependencies
# -----------------------------------------------------------------------
# SuperLU

set(SuperLU_DIST_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/SuperLU_DIST_5.4.0)
set(SuperLU_DIST_LIB ${CMAKE_BINARY_DIR}/build_superlu/lib/libsuperlu_dist.a)
include_directories(
        ${SuperLU_DIST_DIR}/build/include
        ${SuperLU_DIST_DIR}/SRC
)

SET(SAENA_LIB_DEPENDENCIES ${SAENA_LIB_DEPENDENCIES} ${SuperLU_DIST_LIB})

# -----------------------------------------------------------------------
# METIS and PARMETIS

#set(METIS_INCLUDE_DIR    ${CMAKE_BINARY_DIR}/build_metis/include)
#set(PARMETIS_INCLUDE_DIR ${CMAKE_BINARY_DIR}/build_parmetis/include)
set(METIS_LIBRARY        ${CMAKE_BINARY_DIR}/build_metis/lib/libmetis.so)
set(PARMETIS_LIBRARY     ${CMAKE_BINARY_DIR}/build_parmetis/lib/libparmetis.a)

SET(SAENA_LIB_DEPENDENCIES ${SAENA_LIB_DEPENDENCIES} ${PARMETIS_LIBRARY} ${METIS_LIBRARY})

# -----------------------------------------------------------------------
# BOOST

#find_package(BOOST REQUIRED)
#message(STATUS BOOST found: ${BOOST_LIBRARIES})
#include_directories(${Boost_INCLUDE_DIRS})

# For Colorado Summit cluster:
#include_directories("/curc/sw/intel/17.4/mkl/include")
# For Frontera:
#include_directories(/opt/apps/intel19/python2_7/boost/1.69/include)

# -----------------------------------------------------------------------
# BLAS

find_package(BLAS REQUIRED)
message(STATUS BLAS found: ${BLAS_LIBRARIES})

SET(SAENA_LIB_DEPENDENCIES ${SAENA_LIB_DEPENDENCIES} ${BLAS_LIBRARIES})

# -----------------------------------------------------------------------
# LAPACK

find_package(LAPACK REQUIRED)
message( STATUS LAPACK found: ${LAPACK_LIBRARIES} )
include_directories(${LAPACK_INCLUDE_PATH})
#set(LAPACK_LIB /usr/lib/openblas-base/liblapack.a)

SET(SAENA_LIB_DEPENDENCIES ${SAENA_LIB_DEPENDENCIES} ${LAPACK_LIBRARIES})

# -----------------------------------------------------------------------
# MKL

set(MKL_DIR "/opt/intel/compilers_and_libraries_2020.0.166/linux/mkl")
include_directories(${MKL_DIR}/include)

set(MKL_LIB_DIR    "${MKL_DIR}/lib/intel64_lin")

set(MKL_LIB_CORE   "${MKL_LIB_DIR}/libmkl_core.so")
set(MKL_LIB_LP64   "${MKL_LIB_DIR}/libmkl_intel_lp64.so")

set(MKL_LIB_THREAD "${MKL_LIB_DIR}/libmkl_gnu_thread.so")
#set(MKL_LIB_THREAD "${MKL_LIB_DIR}/libmkl_intel_thread.so")

#set(MKL_LIB_BLACS "${MKL_LIB_DIR}/libmkl_blacs_intelmpi_lp64.so")
#set(MKL_LIB_BLACS "${MKL_LIB_DIR}/libmkl_blacs_openmpi_lp64.so")

set(MKL_OMP "/opt/intel/compilers_and_libraries_2020.0.166/linux/compiler/lib/intel64_lin/libiomp5.so")

SET(SAENA_LIB_DEPENDENCIES ${SAENA_LIB_DEPENDENCIES} ${MKL_LIB_CORE} ${MKL_LIB_LP64} ${MKL_LIB_THREAD} ${MKL_OMP})

# -----------------------------------------------------------------------
# IETL: eigensolver

include_directories(external/ietl)
set(HEADER_FILES ${HEADER_FILES}
        include/ietl_saena.h
        )

# -----------------------------------------------------------------------
# usort: to sort elements in parallel

include_directories(external/usort/include)
set(SOURCE_FILES ${SOURCE_FILES}
        external/usort/src/binUtils.cpp
        external/usort/src/parUtils.cpp
        external/usort/src/sort_profiler.cpp
        )

# -----------------------------------------------------------------------
# pugixml: to read xml files for options

#include_directories(external/pugixml/include)

#set(SOURCE_FILES ${SOURCE_FILES}
#        external/pugixml/src/pugixml.cpp
#        )

# -----------------------------------------------------------------------
# ZFP: for compressing arrays

set(ZFP_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/zfp-0.5.5)
set(ZFP_LIB ${CMAKE_CURRENT_BINARY_DIR}/build_zfp/lib/libzfp.so)
include_directories(
        ${ZFP_DIR}/array
        ${ZFP_DIR}/array/zfp
        ${ZFP_DIR}/include
)

SET(SAENA_LIB_DEPENDENCIES ${SAENA_LIB_DEPENDENCIES} ${ZFP_LIB})

# -----------------------------------------------------------------------
#PETSc

#set(PETSC_DIR "~/softwares/petsc-3.8.0")
#set(PETSC_ARCH "arch-linux2-c-debug")

set(PETSC_DIR "~/Software/petsc-3.8.4")
set(PETSC_ARCH "arch-linux2-c-opt")
set(PETSC_LIB ${PETSC_DIR}/${PETSC_ARCH}/lib/libpetsc.so)
include_directories(
        ${PETSC_DIR}/include
        ${PETSC_DIR}/${PETSC_ARCH}/include
)

SET(SAENA_LIB_DEPENDENCIES ${SAENA_LIB_DEPENDENCIES} ${PETSC_LIB})

# -----------------------------------------------------------------------
#CombBLAS

#set(COMBBLAS_DIR /home/boss/Software/CombBLAS_beta_16_2)
set(COMBBLAS_DIR /home/majidrp/Software/CombBLAS_beta_16_2)
include_directories("${COMBBLAS_DIR}/install/include")
set(COMBBLAS_LIB ${COMBBLAS_DIR}/install/lib/libCombBLAS.a)

SET(SAENA_LIB_DEPENDENCIES ${SAENA_LIB_DEPENDENCIES} ${COMBBLAS_LIB})

# -----------------------------------------------------------------------
# dollar (profiler)

set(DOLLAR_DIR "${CMAKE_CURRENT_SOURCE_DIR}/external/dollar")
include_directories(
        ${DOLLAR_DIR}
)

# -----------------------------------------------------------------------
# trsl: for sampling

#set(TRSL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/trsl-0.2.2)
#include_directories(
#        ${TRSL_DIR}
#)

# -----------------------------------------------------------------------
# sparsepp: alternative for unordered_map and unordered_set

#set(SPARSEPP_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/sparsepp)
#include_directories(
#        ${SPARSEPP_DIR}
#)

# -----------------------------------------------------------------------
# Main Files

include_directories(include)

set(HEADER_FILES ${HEADER_FILES}
        include/saena.hpp
        include/aux_functions.h
        include/data_struct.h
        include/saena_matrix.h
        include/saena_matrix_dense.h
        include/saena_object.h
        include/strength_matrix.h
        include/prolong_matrix.h
        include/restrict_matrix.h
        include/grid.h
        include/saena_vector.h
        include/petsc_functions.h
        include/combblas_functions.h
        include/GR_encoder.h
        )

set(SOURCE_FILES ${SOURCE_FILES}
        ${HEADER_FILES}
        src/saena.cpp
        src/aux_functions.cpp
        src/data_struct.cpp
        src/strength_matrix.cpp
        src/prolong_matrix.cpp
        src/restrict_matrix.cpp
        src/saena_matrix_dense.cpp
        src/saena_vector.cpp

        src/saena_matrix.cpp
        src/saena_matrix_repart.cpp
        src/saena_matrix_setup.cpp
        src/saena_matrix_matvec.cpp
        src/saena_matrix_shrink.cpp
        src/saena_matrix_zfp.cpp

        src/saena_object.cpp
        src/saena_object_setup1.cpp
        src/saena_object_setup2.cpp
        src/saena_object_setup_matmat.cpp
        src/saena_object_solve.cpp
        src/saena_object_lazy.cpp
        src/saena_object_repart_shrink.cpp
        src/saena_object_sparsify.cpp
        src/saena_object_elemental.cpp
        src/saena_object_write2file.cpp
#        src/saena_object_setup2_backup.cpp
#        src/saena_object_setup2_test.cpp

        src/GR_encoder.cpp

        src/petsc_functions.cpp
        src/combblas_functions.cpp
        )

# -----------------------------------------------------------------------

# Intel flags:
# -c                see Output, Debug, and PCH Options
# -g                see Output, Debug, and PCH Options
# -xCORE-AVX512     for Cascade Lake Processors (like Frontera) and Skylake
# -xCORE-AVX2       for Broadwell and Haswell
# -xAVX             for Ivy Bridge and Sandy Bridge

# Enable Intel Optimization flags
IF(CMAKE_BUILD_TYPE STREQUAL Release)
    set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -O3 -axCORE-AVX512,CORE-AVX2,AVX -xSSE4.2")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -axCORE-AVX512,CORE-AVX2,AVX -xSSE4.2")
ENDIF()

# -----------------------------------------------------------------------

# Enable the Intel Optimization Reports
# -qopt-report[=N]   N=1-5 specifies an increasing level of detail
# -qopt-report-file   =stdout, stderr, filename
# -qopt-report-phase  =loop, vec, par, cg, openmp, ipo, pgo, offload, all
# -qopt-report-routine=fn1[,fn2,â€¦]

set(REPORT_ARG1 "-qopt-report=5 -qopt-report-file=stdout -qopt-report-phase=loop,vec,par,cg")
set(REPORT_ROUTINE "-qopt-report-routine=reorder_split")
#set(REPORT_FILES "src/saena_object_setup_matmat.cpp")
#set(REPORT_FILE "-qopt-report-filter=${REPORT_FILES}")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${REPORT_ARG1} ${REPORT_ROUTINE}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${REPORT_ARG1} ${REPORT_ROUTINE}")

# -----------------------------------------------------------------------

#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -std=c++14 -DTHREADED -fopenmp -DNDEBUG -w -DGRAPH_GENERATOR_SEQ -O2 -DMPICH_IGNORE_CXX_SEEK")
#SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DNDEBUG -Drestrict=__restrict__ -w -DGRAPH_GENERATOR_SEQ -O2 -DMPICH_IGNORE_CXX_SEEK")

#add_executable(Saena            src/main.cpp             ${SOURCE_FILES} ${HEADER_FILES})
#add_executable(Saena_read_file  src/main_read_file.cpp   ${SOURCE_FILES} ${HEADER_FILES})
#add_executable(Saena2_read_file src/main_read_2file.cpp  ${SOURCE_FILES} ${HEADER_FILES})
#add_executable(Saena_band       src/main_band_matrix.cpp ${SOURCE_FILES} ${HEADER_FILES})
#add_executable(Saena_lazy       src/main_lazy.cpp        ${SOURCE_FILES} ${HEADER_FILES})
#add_executable(Saena_zfp        src/main_zfp.cpp         ${SOURCE_FILES} ${HEADER_FILES})
add_executable(Saena_matmat     src/main_matmat.cpp      ${SOURCE_FILES} ${HEADER_FILES})
#add_executable(Saena_matmat_read_2file src/main_matmat_read_2file.cpp ${SOURCE_FILES} ${HEADER_FILES})

# -----------------------------------------------------------------------

#SET(SAENA_LIB_DEPENDENCIES ${SAENA_LIB_DEPENDENCIES} ${MPI_LIBRARIES} ${SuperLU_DIST_LIB} ${BLAS_LIBRARIES} ${LAPACK_LIBRARIES}
#        ${PARMETIS_LIBRARY} ${METIS_LIBRARY} m ${ZFP_LIB} ${PETSC_LIB} ${COMBBLAS_LIB})
#SET(SAENA_LIB_DEPENDENCIES ${SAENA_LIB_DEPENDENCIES} m)
#message("SAENA_LIB_DEPENDENCIES: " ${SAENA_LIB_DEPENDENCIES})

#target_link_libraries(Saena                    ${SAENA_LIB_DEPENDENCIES})
#target_link_libraries(Saena_read_file          ${SAENA_LIB_DEPENDENCIES})
#target_link_libraries(Saena2_read_file         ${SAENA_LIB_DEPENDENCIES})
#target_link_libraries(Saena_band               ${SAENA_LIB_DEPENDENCIES})
#target_link_libraries(Saena_lazy               ${SAENA_LIB_DEPENDENCIES})
#target_link_libraries(Saena_zfp                ${SAENA_LIB_DEPENDENCIES})
target_link_libraries(Saena_matmat             ${SAENA_LIB_DEPENDENCIES})
#target_link_libraries(Saena_matmat_read_2file  ${SAENA_LIB_DEPENDENCIES})