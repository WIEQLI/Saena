=======================================================================
	        EquationType: UnsteadyDiffusion
	        Session Name: ../solvers/ADRSolver/Tests/diff3d
	        Spatial Dim.: 3
	  Max SEM Exp. Order: 6
	      Num. Processes: 8
	      Expansion Dim.: 3
	     Projection Type: Continuous Galerkin
	           Advection: explicit
	           Diffusion: implicit
	           Time Step: 0.0001
	        No. of Steps: 200
	 Checkpoints (steps): 200
	    Integration Type: DIRKOrder3
=======================================================================
Initial Conditions:
  - Field u: 0 (default)
renaming "../solvers/ADRSolver/Tests/diff3d_0.chk" -> "../solvers/ADRSolver/Testsdiff3d_0.bak153.chk"
Writing: "../solvers/ADRSolver/Tests/diff3d_0.chk" (0.0178394s, XML)

time=4.35867e-05

time=4.35867e-05

time=4.35867e-05

time=4.35867e-05

time=4.35867e-05

time=4.35867e-05

time=4.35867e-05

time=4.35867e-05

number of processes = 8, number of threads = 1

_____________________________

level = 0 
number of procs = 8 
matrix size 	= 3695 
nonzero 	= 257719 
density 	= 0.018876 

connStrength = 0.30 
current size = 3695 
new size     = 1244 
division     = 2.97
_____________________________

level = 1 
number of procs = 8 
matrix size 	= 1244 
nonzero 	= 1267262 
density 	= 0.818890 

connStrength = 0.30 
current size = 1244 
new size     = 470 
division     = 2.65
_____________________________

level = 2 
number of procs = 8 
matrix size 	= 470 
nonzero 	= 220900 
density 	= 1.000000 

connStrength = 0.30 
current size = 470 
new size     = 313 
division     = 1.50
_____________________________

level = 3 
number of procs = 8 
matrix size 	= 313 
nonzero 	= 97969 
density 	= 1.000000 

connStrength = 0.30 
current size = 313 
new size     = 272 
division     = 1.15
_____________________________

level = 4 
number of procs = 8 
matrix size 	= 272 
nonzero 	= 73984 
density 	= 1.000000 

connStrength = 0.30 
current size = 272 
new size     = 265 
division     = 1.03
_____________________________

level = 5 
number of procs = 8 
matrix size 	= 265 
nonzero 	= 70225 
density 	= 1.000000 
_____________________________

number of levels = << 4 >> (the finest level is 0)

******************************************************

 solver1.set_matrix() took 
 solver1.set_matrix() took 
 solver1.set_matrix() took 5 second(s) on P
 solver1.set_matrix() took 
 solver1.set_matrix() took 
 solver1.set_matrix() took 
 solver1.set_matrix() took 
 solver1.set_matrix() took 0. Size = 649055 second(s) on P1. Size = 873555 second(s) on P2. Size = 5 second(s) on P3. Size = 51450
76108
5 second(s) on P4. Size = 997275 second(s) on P5. Size = 315505 second(s) on P6. Size = 822635 second(s) on P7. Size = 60336





******************************************************

initial residual = 2.002698e+00 

Vcycle 1: 0.1750077632  	0.0873859890 
Vcycle 2: 0.0618533478  	0.3534320230 
Vcycle 3: 0.0320872690  	0.5187636586 
Vcycle 4: 0.0195215402  	0.6083889601 
Vcycle 5: 0.0119628354  	0.6128018210 
Vcycle 6: 0.0072943514  	0.6097510429 
Vcycle 7: 0.0042595653  	0.5839539521 
Vcycle 8: 0.0027888348  	0.6547228754 
Vcycle 9: 0.0022249560  	0.7978084563 
Vcycle 10: 0.0020743874  	0.9323273663 
Vcycle 11: 0.0019741226  	0.9516653674 
Vcycle 12: 0.0016865284  	0.8543179350 
Vcycle 13: 0.0014190875  	0.8414251999 
Vcycle 14: 0.0011676695  	0.8228312178 
Vcycle 15: 0.0009048207  	0.7748945650 
Vcycle 16: 0.0007333212  	0.8104601764 
Vcycle 17: 0.0005840960  	0.7965078188 
Vcycle 18: 0.0004853622  	0.8309630543 
Vcycle 19: 0.0003808957  	0.7847657538 
Vcycle 20: 0.0003015622  	0.7917186086 
Vcycle 21: 0.0002376611  	0.7880999051 
Vcycle 22: 0.0001776237  	0.7473820533 
Vcycle 23: 0.0001390770  	0.7829871053 
Vcycle 24: 0.0001166855  	0.8389991331 
Vcycle 25: 0.0001036384  	0.8881853188 
Vcycle 26: 0.0000908259  	0.8763729767 
Vcycle 27: 0.0000747538  	0.8230455614 
Vcycle 28: 0.0000580269  	0.7762393807 
Vcycle 29: 0.0000467986  	0.8064993377 
Vcycle 30: 0.0000367272  	0.7847927257 
Vcycle 31: 0.0000290438  	0.7907964811 
Vcycle 32: 0.0000245645  	0.8457771290 
Vcycle 33: 0.0000201197  	0.8190539861 
Vcycle 34: 0.0000168606  	0.8380156893 
Vcycle 35: 0.0000141105  	0.8368886216 
Vcycle 36: 0.0000110894  	0.7858971540 
Vcycle 37: 0.0000089702  	0.8089034586 
Vcycle 38: 0.0000077450  	0.8634117499 
Vcycle 39: 0.0000062833  	0.8112672301 
Vcycle 40: 0.0000050328  	0.8009776853 
Vcycle 41: 0.0000041455  	0.8237065923 
Vcycle 42: 0.0000033818  	0.8157644698 
Vcycle 43: 0.0000027587  	0.8157544390 
Vcycle 44: 0.0000022054  	0.7994332604 
Vcycle 45: 0.0000018561  	0.8416163842 
Vcycle 46: 0.0000015449  	0.8323335716 
Vcycle 47: 0.0000013227  	0.8561905991 
Vcycle 48: 0.0000011631  	0.8793481412 
Vcycle 49: 0.0000009829  	0.8450862368 
Vcycle 50: 0.0000007685  	0.7818086428 
Vcycle 51: 0.0000006287  	0.8181663442 
Vcycle 52: 0.0000005503  	0.8752921811 
Vcycle 53: 0.0000004324  	0.7857077503 
Vcycle 54: 0.0000003504  	0.8103920891 
Vcycle 55: 0.0000002872  	0.8197081393 
Vcycle 56: 0.0000002423  	0.8435836833 
Vcycle 57: 0.0000002037  	0.8407339916 
Vcycle 58: 0.0000001691  	0.8300805610 
Vcycle 59: 0.0000001315  	0.7778604984 
Vcycle 60: 0.0000001008  	0.7666034782 
Vcycle 61: 0.0000000782  	0.7753541065 
Vcycle 62: 0.0000000621  	0.7948065212 
Vcycle 63: 0.0000000536  	0.8632190081 
Vcycle 64: 0.0000000484  	0.9019037715 
Vcycle 65: 0.0000000424  	0.8754973290 
Vcycle 66: 0.0000000345  	0.8141081756 
Vcycle 67: 0.0000000262  	0.7599642288 
Vcycle 68: 0.0000000206  	0.7861525069 
Vcycle 69: 0.0000000155  	0.7524367881 
Vcycle 70: 0.0000000124  	0.8017321565 
Vcycle 71: 0.0000000099  	0.7993492915 
Vcycle 72: 0.0000000080  	0.8007120521 
Vcycle 73: 0.0000000065  	0.8112149467 
Vcycle 74: 0.0000000055  	0.8517693850 
Vcycle 75: 0.0000000047  	0.8470555206 
Vcycle 76: 0.0000000039  	0.8396876910 
Vcycle 77: 0.0000000035  	0.8948305265 
Vcycle 78: 0.0000000030  	0.8509351845 
Vcycle 79: 0.0000000024  	0.8054314732 
Vcycle 80: 0.0000000020  	0.8193722027 
Vcycle 81: 0.0000000015  	0.7829115473 
Vcycle 82: 0.0000000013  	0.8228278698 
Vcycle 83: 0.0000000011  	0.8311781652 
Vcycle 84: 0.0000000009  	0.8385191647 
Vcycle 85: 0.0000000007  	0.8484076221 
Vcycle 86: 0.0000000006  	0.7935598884 
Vcycle 87: 0.0000000005  	0.8602424072 
Vcycle 88: 0.0000000004  	0.8508961566 
Vcycle 89: 0.0000000004  	0.8722541013 
Vcycle 90: 0.0000000003  	0.8262186019 
Vcycle 91: 0.0000000002  	0.7857549027 
Vcycle 92: 0.0000000002  	0.8000685368 
Vcycle 93: 0.0000000002  	0.8401934610 
Vcycle 94: 0.0000000001  	0.8600445397 
Vcycle 95: 0.0000000001  	0.8397227345 
Vcycle 96: 0.0000000001  	0.8226013310 
Vcycle 97: 0.0000000001  	0.7976375414 
Vcycle 98: 0.0000000001  	0.8303903224 
Vcycle 99: 0.0000000001  	0.8350397239 
Vcycle 100: 0.0000000000  	0.8066034320 
Vcycle 101: 0.0000000000  	0.7792966749 
Vcycle 102: 0.0000000000  	0.8165774962 
Vcycle 103: 0.0000000000  	0.7595253508 
Vcycle 104: 0.0000000000  	0.8200971774 
Vcycle 105: 0.0000000000  	0.8468629745 
Vcycle 106: 0.0000000000  	0.8933596712 
Vcycle 107: 0.0000000000  	0.8903847043 
Vcycle 108: 0.0000000000  	0.8325384157 
Vcycle 109: 0.0000000000  	0.7356845680 
Vcycle 110: 0.0000000000  	0.7322863456 
Vcycle 111: 0.0000000000  	0.7589893551 
Vcycle 112: 0.0000000000  	0.8539155826 
Vcycle 113: 0.0000000000  	0.8886818234 
Vcycle 114: 0.0000000000  	0.8655752337 
Vcycle 115: 0.0000000000  	0.8485838651 
Vcycle 116: 0.0000000000  	0.8216193586 
Vcycle 117: 0.0000000000  	0.7787950575 
Vcycle 118: 0.0000000000  	0.7829256514 
Vcycle 119: 0.0000000000  	0.7502423075 
Vcycle 120: 0.0000000000  	0.7508990626 
Vcycle 121: 0.0000000000  	0.7697721274 
Vcycle 122: 0.0000000000  	0.7748520050 
Vcycle 123: 0.0000000000  	0.7986982460 
Vcycle 124: 0.0000000000  	0.8218413607 
Vcycle 125: 0.0000000000  	0.8425031731 
Vcycle 126: 0.0000000000  	0.8774214937 
Vcycle 127: 0.0000000000  	0.8344908219 
Vcycle 128: 0.0000000000  	0.8767332848 
Vcycle 129: 0.0000000000  	0.8421729864 
Vcycle 130: 0.0000000000  	0.7919798717 
Vcycle 131: 0.0000000000  	0.7522209644 
Vcycle 132: 0.0000000000  	0.7385767693 
Vcycle 133: 0.0000000000  	0.7231058444 
Vcycle 134: 0.0000000000  	0.7244997751 
Vcycle 135: 0.0000000000  	0.7661696560 
Vcycle 136: 0.0000000000  	0.8937930246 
Vcycle 137: 0.0000000000  	0.8526768836 
Vcycle 138: 0.0000000000  	0.8967733553 
Vcycle 139: 0.0000000000  	0.8363670810 
Vcycle 140: 0.0000000000  	0.8063455667 
Vcycle 141: 0.0000000000  	0.7446131105 
Vcycle 142: 0.0000000000  	0.7641588923 
Vcycle 143: 0.0000000000  	0.7801902638 
Vcycle 144: 0.0000000000  	0.8165111085 
Vcycle 145: 0.0000000000  	0.8778055627 
Vcycle 146: 0.0000000000  	0.8148755844 
Vcycle 147: 0.0000000000  	0.7433194339 
Vcycle 148: 0.0000000000  	0.7330142244 
Vcycle 149: 0.0000000000  	0.7785018035 
Vcycle 150: 0.0000000000  	0.7902945902 
Vcycle 151: 0.0000000000  	0.8702340294 
Vcycle 152: 0.0000000000  	0.8959176109 
Vcycle 153: 0.0000000000  	0.9109045847 
Vcycle 154: 0.0000000000  	0.8039901979 
Vcycle 155: 0.0000000000  	0.7329755286 
Vcycle 156: 0.0000000000  	0.7074669550 
Vcycle 157: 0.0000000000  	0.7758803419 
Vcycle 158: 0.0000000000  	0.8455454306 
Vcycle 159: 0.0000000000  	0.8222802692 
Vcycle 160: 0.0000000000  	0.8421587083 
Vcycle 161: 0.0000000000  	0.8326818612 
Vcycle 162: 0.0000000000  	0.7843372024 
Vcycle 163: 0.0000000000  	0.7901101175 
Vcycle 164: 0.0000000000  	0.7594589518 
Vcycle 165: 0.0000000000  	0.7867934578 
Vcycle 166: 0.0000000000  	0.7865834910 
Vcycle 167: 0.0000000000  	0.7879326901 
Vcycle 168: 0.0000000000  	0.8158217383 
Vcycle 169: 0.0000000000  	0.8536742593 
Vcycle 170: 0.0000000000  	0.8059486292 
Vcycle 171: 0.0000000000  	0.7748733163 
Vcycle 172: 0.0000000000  	0.8184165485 
Vcycle 173: 0.0000000000  	0.8321821990 
Vcycle 174: 0.0000000000  	0.7999506264 
Vcycle 175: 0.0000000000  	0.7976419730 
Vcycle 176: 0.0000000000  	0.7687654903 
Vcycle 177: 0.0000000000  	0.7421932963 
Vcycle 178: 0.0000000000  	0.7571301550 
Vcycle 179: 0.0000000000  	0.8176583524 
Vcycle 180: 0.0000000000  	0.8741946807 
Vcycle 181: 0.0000000000  	0.8524225936 
Vcycle 182: 0.0000000000  	0.8697890168 
Vcycle 183: 0.0000000000  	0.8666091335 
Vcycle 184: 0.0000000000  	0.8219308495 
Vcycle 185: 0.0000000000  	0.7834574037 
Vcycle 186: 0.0000000000  	0.7765626375 
Vcycle 187: 0.0000000000  	0.7477113000 
Vcycle 188: 0.0000000000  	0.8121862936 
Vcycle 189: 0.0000000000  	0.8153247555 

******************************************************

final:
stopped at iteration    = 189 
final absolute residual = 1.888340e-19
relative residual       = 9.428980e-20 

******************************************************
****** Nek++ and Saena outputs match on P1! ******

****** Nek++ and Saena outputs match on P2! ******

****** Nek++ and Saena outputs match on P3! ******

****** Nek++ and Saena outputs match on P4! ******

****** Nek++ and Saena outputs match on P5! ******

****** Nek++ and Saena outputs match on P6! ******

****** Nek++ and Saena outputs match on P7! ******


time=7.17933e-05

time=7.17933e-05

time=7.17933e-05

time=7.17933e-05

time=7.17933e-05

time=7.17933e-05

time=7.17933e-05
   1.   |-int saena_object::setup(saena_matrix*) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object.cpp:42)                                                                                                                                                                                  [..........]  1.20% CPU (  182.275ms)     1 hits 
   2.   | +-int saena_object::coarsen(Grid*) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object.cpp:167)                                                                                                                                                                                 [..........]  0.00% CPU (    0.313ms)     5 hits
   3.   |   |-int restrict_matrix::transposeP(prolong_matrix*) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/restrict_matrix.cpp:16)                                                                                                                                                                 [..........]  0.97% CPU (  147.386ms)     5 hits 
   4.   |   |-int saena_object::triple_mat_mult(Grid*) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_setup2.cpp:1199)                                                                                                                                                                           [=.........] 15.36% CPU ( 2334.558ms)     5 hits
   5.   |   | +-int saena_object::fast_mm(cooEntry*, cooEntry*, std::vector<cooEntry>&, nnz_t, nnz_t, index_t, index_t, index_t, index_t, index_t, index_t, index_t*, index_t*, index_t*, index_t*, value_t*, MPI_Comm) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_setup2.cpp:646)   [=.........] 11.71% CPU ( 1780.248ms)    45 hits 
   6.   |   |   +-int saena_object::fast_mm(cooEntry*, cooEntry*, std::vector<cooEntry>&, nnz_t, nnz_t, index_t, index_t, index_t, index_t, index_t, index_t, index_t*, index_t*, index_t*, index_t*, value_t*, MPI_Comm) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_setup2.cpp:646) [..........]  1.11% CPU (  168.978ms)     4 hits 
   7.   |   |-int saena_object::create_prolongation(saena_matrix*, std::vector<long unsigned int>&, prolong_matrix*) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_setup1.cpp:29)                                                                                                       [..........]  1.30% CPU (  197.487ms)     5 hits 
   8.   |   +-int saena_object::find_aggregation(saena_matrix*, std::vector<long unsigned int>&, std::vector<unsigned int>&) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_setup1.cpp:142)                                                                                              [..........]  1.12% CPU (  170.056ms)     5 hits 
   9.   +-int saena_object::solve_pcg(std::vector<double>&) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_solve.cpp:880)                                                                                                                                                                [===.......] 36.88% CPU ( 5605.924ms)     1 hits 
  10.     +-int saena_object::solve_coarsest_SuperLU(saena_matrix*, std::vector<double>&, std::vector<double>&) (/uufs/chpc.utah.edu/common/home/u1013493/nektar++/library/MultiRegions/Saena_Public/src/saena_object_solve.cpp:102)                                                                                                            [===.......] 30.34% CPU ( 4611.294ms)   189 hits 
****** Nek++ and Saena outputs match on P0! ******


time=7.17933e-05

number of processes = 8, number of threads = 1

_____________________________

level = 0 
number of procs = 8 
matrix size 	= 3695 
nonzero 	= 257719 
density 	= 0.018876 
